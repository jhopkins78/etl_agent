{"ast":null,"code":"var _jsxFileName = \"/Users/joshuahopkins/Desktop/etl_agent/dashboard-source/src/context/DashboardContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\n\n// Define the types for our context\n\n// Model types\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create the context with default values\nconst DashboardContext = /*#__PURE__*/createContext({\n  assignmentFile: null,\n  setAssignmentFile: () => {},\n  tasks: [],\n  setTasks: () => {},\n  workflowSteps: [],\n  updateWorkflowStep: () => {},\n  // Model Training settings\n  enableTuning: true,\n  // default: on\n  setEnableTuning: () => {},\n  useBayesianOptimization: false,\n  setUseBayesianOptimization: () => {},\n  preferredModel: null,\n  setPreferredModel: () => {},\n  availableModels: [],\n  activeInsightTab: 'full-report',\n  setActiveInsightTab: () => {},\n  activeDataTab: 'data-preview',\n  setActiveDataTab: () => {},\n  isLoading: false,\n  setIsLoading: () => {}\n});\n\n// Create a provider component\nexport const DashboardProvider = ({\n  children\n}) => {\n  _s();\n  const [assignmentFile, setAssignmentFile] = useState(null);\n  const [tasks, setTasks] = useState([{\n    id: 1,\n    name: 'Exploratory Data Analysis',\n    status: 'completed'\n  }, {\n    id: 2,\n    name: 'Feature Engineering',\n    status: 'in-progress'\n  }, {\n    id: 3,\n    name: 'Model Training',\n    status: 'pending'\n  }, {\n    id: 4,\n    name: 'Evaluation',\n    status: 'pending'\n  }, {\n    id: 5,\n    name: 'Reporting',\n    status: 'pending'\n  }]);\n  const [workflowSteps, setWorkflowSteps] = useState([{\n    id: 1,\n    name: 'Data Loading',\n    status: 'completed',\n    description: 'Load dataset from source'\n  }, {\n    id: 2,\n    name: 'Data Cleaning',\n    status: 'completed',\n    description: 'Handle missing values and outliers'\n  }, {\n    id: 3,\n    name: 'Feature Engineering',\n    status: 'in-progress',\n    description: 'Create and transform features'\n  }, {\n    id: 4,\n    name: 'Model Training',\n    status: 'pending',\n    description: 'Train machine learning models'\n  }, {\n    id: 5,\n    name: 'Model Evaluation',\n    status: 'pending',\n    description: 'Evaluate model performance'\n  }, {\n    id: 6,\n    name: 'Report Generation',\n    status: 'pending',\n    description: 'Generate final insights report'\n  }]);\n\n  // Model Training settings\n  const [enableTuning, setEnableTuning] = useState(true); // default: on\n  const [useBayesianOptimization, setUseBayesianOptimization] = useState(false);\n  const [preferredModel, setPreferredModel] = useState(null);\n  const [availableModels, setAvailableModels] = useState([{\n    value: 'linear_regression',\n    label: 'Linear Regression'\n  }, {\n    value: 'ridge',\n    label: 'Ridge'\n  }, {\n    value: 'lasso',\n    label: 'Lasso'\n  }, {\n    value: 'elasticnet',\n    label: 'ElasticNet'\n  }, {\n    value: 'knn',\n    label: 'KNN'\n  }, {\n    value: 'decision_tree',\n    label: 'Decision Tree'\n  }, {\n    value: 'random_forest',\n    label: 'Random Forest'\n  }, {\n    value: 'gradient_boosting',\n    label: 'Gradient Boosting'\n  }, {\n    value: 'svr',\n    label: 'SVR'\n  }]);\n  const [activeInsightTab, setActiveInsightTab] = useState('full-report');\n  const [activeDataTab, setActiveDataTab] = useState('data-preview');\n  const [isLoading, setIsLoading] = useState(false);\n  const updateWorkflowStep = (id, status) => {\n    setWorkflowSteps(prevSteps => prevSteps.map(step => step.id === id ? {\n      ...step,\n      status\n    } : step));\n\n    // Update related tasks if needed\n    if (id === 3 && status === 'completed') {\n      setTasks(prevTasks => prevTasks.map(task => task.id === 2 ? {\n        ...task,\n        status: 'completed'\n      } : task));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(DashboardContext.Provider, {\n    value: {\n      assignmentFile,\n      setAssignmentFile,\n      tasks,\n      setTasks,\n      workflowSteps,\n      updateWorkflowStep,\n      // Model Training settings\n      enableTuning,\n      setEnableTuning,\n      useBayesianOptimization,\n      setUseBayesianOptimization,\n      preferredModel,\n      setPreferredModel,\n      availableModels,\n      activeInsightTab,\n      setActiveInsightTab,\n      activeDataTab,\n      setActiveDataTab,\n      isLoading,\n      setIsLoading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n\n// Create a custom hook to use the context\n_s(DashboardProvider, \"eQbNH9wIQMOi9Yy3FCsB1VENY3o=\");\n_c = DashboardProvider;\nexport const useDashboard = () => {\n  _s2();\n  return useContext(DashboardContext);\n};\n_s2(useDashboard, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"DashboardProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","DashboardContext","assignmentFile","setAssignmentFile","tasks","setTasks","workflowSteps","updateWorkflowStep","enableTuning","setEnableTuning","useBayesianOptimization","setUseBayesianOptimization","preferredModel","setPreferredModel","availableModels","activeInsightTab","setActiveInsightTab","activeDataTab","setActiveDataTab","isLoading","setIsLoading","DashboardProvider","children","_s","id","name","status","setWorkflowSteps","description","setAvailableModels","value","label","prevSteps","map","step","prevTasks","task","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useDashboard","_s2","$RefreshReg$"],"sources":["/Users/joshuahopkins/Desktop/etl_agent/dashboard-source/src/context/DashboardContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\n// Define the types for our context\ntype WorkflowStep = {\n  id: number;\n  name: string;\n  status: 'completed' | 'in-progress' | 'pending';\n  description: string;\n};\n\ntype Task = {\n  id: number;\n  name: string;\n  status: 'completed' | 'in-progress' | 'pending';\n};\n\n// Model types\ntype ModelOption = {\n  value: string;\n  label: string;\n};\n\ntype DashboardContextType = {\n  // Assignment state\n  assignmentFile: File | null;\n  setAssignmentFile: (file: File | null) => void;\n  tasks: Task[];\n  setTasks: (tasks: Task[]) => void;\n  \n  // Workflow state\n  workflowSteps: WorkflowStep[];\n  updateWorkflowStep: (id: number, status: 'completed' | 'in-progress' | 'pending') => void;\n  \n  // Model Training settings\n  enableTuning: boolean;\n  setEnableTuning: (enable: boolean) => void;\n  useBayesianOptimization: boolean;\n  setUseBayesianOptimization: (use: boolean) => void;\n  preferredModel: string | null;\n  setPreferredModel: (model: string | null) => void;\n  availableModels: ModelOption[];\n  \n  // Active tab states\n  activeInsightTab: string;\n  setActiveInsightTab: (tab: string) => void;\n  activeDataTab: string;\n  setActiveDataTab: (tab: string) => void;\n  \n  // Loading states\n  isLoading: boolean;\n  setIsLoading: (loading: boolean) => void;\n};\n\n// Create the context with default values\nconst DashboardContext = createContext<DashboardContextType>({\n  assignmentFile: null,\n  setAssignmentFile: () => {},\n  tasks: [],\n  setTasks: () => {},\n  workflowSteps: [],\n  updateWorkflowStep: () => {},\n  \n  // Model Training settings\n  enableTuning: true, // default: on\n  setEnableTuning: () => {},\n  useBayesianOptimization: false,\n  setUseBayesianOptimization: () => {},\n  preferredModel: null,\n  setPreferredModel: () => {},\n  availableModels: [],\n  \n  activeInsightTab: 'full-report',\n  setActiveInsightTab: () => {},\n  activeDataTab: 'data-preview',\n  setActiveDataTab: () => {},\n  isLoading: false,\n  setIsLoading: () => {},\n});\n\n// Create a provider component\nexport const DashboardProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [assignmentFile, setAssignmentFile] = useState<File | null>(null);\n  const [tasks, setTasks] = useState<Task[]>([\n    { id: 1, name: 'Exploratory Data Analysis', status: 'completed' },\n    { id: 2, name: 'Feature Engineering', status: 'in-progress' },\n    { id: 3, name: 'Model Training', status: 'pending' },\n    { id: 4, name: 'Evaluation', status: 'pending' },\n    { id: 5, name: 'Reporting', status: 'pending' }\n  ]);\n  \n  const [workflowSteps, setWorkflowSteps] = useState<WorkflowStep[]>([\n    { id: 1, name: 'Data Loading', status: 'completed', description: 'Load dataset from source' },\n    { id: 2, name: 'Data Cleaning', status: 'completed', description: 'Handle missing values and outliers' },\n    { id: 3, name: 'Feature Engineering', status: 'in-progress', description: 'Create and transform features' },\n    { id: 4, name: 'Model Training', status: 'pending', description: 'Train machine learning models' },\n    { id: 5, name: 'Model Evaluation', status: 'pending', description: 'Evaluate model performance' },\n    { id: 6, name: 'Report Generation', status: 'pending', description: 'Generate final insights report' }\n  ]);\n  \n  // Model Training settings\n  const [enableTuning, setEnableTuning] = useState<boolean>(true); // default: on\n  const [useBayesianOptimization, setUseBayesianOptimization] = useState<boolean>(false);\n  const [preferredModel, setPreferredModel] = useState<string | null>(null);\n  const [availableModels, setAvailableModels] = useState<ModelOption[]>([\n    { value: 'linear_regression', label: 'Linear Regression' },\n    { value: 'ridge', label: 'Ridge' },\n    { value: 'lasso', label: 'Lasso' },\n    { value: 'elasticnet', label: 'ElasticNet' },\n    { value: 'knn', label: 'KNN' },\n    { value: 'decision_tree', label: 'Decision Tree' },\n    { value: 'random_forest', label: 'Random Forest' },\n    { value: 'gradient_boosting', label: 'Gradient Boosting' },\n    { value: 'svr', label: 'SVR' }\n  ]);\n  \n  const [activeInsightTab, setActiveInsightTab] = useState('full-report');\n  const [activeDataTab, setActiveDataTab] = useState('data-preview');\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const updateWorkflowStep = (id: number, status: 'completed' | 'in-progress' | 'pending') => {\n    setWorkflowSteps(prevSteps => \n      prevSteps.map(step => \n        step.id === id ? { ...step, status } : step\n      )\n    );\n    \n    // Update related tasks if needed\n    if (id === 3 && status === 'completed') {\n      setTasks(prevTasks => \n        prevTasks.map(task => \n          task.id === 2 ? { ...task, status: 'completed' } : task\n        )\n      );\n    }\n  };\n  \n  return (\n    <DashboardContext.Provider value={{\n      assignmentFile,\n      setAssignmentFile,\n      tasks,\n      setTasks,\n      workflowSteps,\n      updateWorkflowStep,\n      \n      // Model Training settings\n      enableTuning,\n      setEnableTuning,\n      useBayesianOptimization,\n      setUseBayesianOptimization,\n      preferredModel,\n      setPreferredModel,\n      availableModels,\n      \n      activeInsightTab,\n      setActiveInsightTab,\n      activeDataTab,\n      setActiveDataTab,\n      isLoading,\n      setIsLoading,\n    }}>\n      {children}\n    </DashboardContext.Provider>\n  );\n};\n\n// Create a custom hook to use the context\nexport const useDashboard = () => useContext(DashboardContext);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}